// This file is autogenerated by scripts/get-tables.py
// Do not edit it!

// By using static arrays we can have compile-time guaranties that
// we are not reading out-ouf-bounds.
// Also, it removes bounds-checking overhead.

#![allow(dead_code)]

pub mod name {
    #[derive(Clone, Copy)]
    pub struct NameRecord {
        data: [u8; Self::SIZE],
    }

    impl NameRecord {
        pub const SIZE: usize = 12;

        #[inline(always)]
        pub fn new(input: &[u8]) -> Self {
            let mut data = [0u8; Self::SIZE];
            data.clone_from_slice(input);
            NameRecord { data }
        }

        #[inline(always)]
        pub fn platform_id(&self) -> u16 {
            u16::from_be_bytes([self.data[0], self.data[1]])
        }

        #[inline(always)]
        pub fn encoding_id(&self) -> u16 {
            u16::from_be_bytes([self.data[2], self.data[3]])
        }

        #[inline(always)]
        pub fn language_id(&self) -> u16 {
            u16::from_be_bytes([self.data[4], self.data[5]])
        }

        #[inline(always)]
        pub fn name_id(&self) -> u16 {
            u16::from_be_bytes([self.data[6], self.data[7]])
        }

        #[inline(always)]
        pub fn length(&self) -> u16 {
            u16::from_be_bytes([self.data[8], self.data[9]])
        }

        #[inline(always)]
        pub fn offset(&self) -> u16 {
            u16::from_be_bytes([self.data[10], self.data[11]])
        }
    }
}
