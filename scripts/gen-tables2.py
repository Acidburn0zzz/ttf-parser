#!/usr/bin/env python3

import re


def to_snake_case(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


class TTFType:
    def __init__(self):
        self.data = []

    def to_rust(self) -> str:
        raise NotImplementedError()

    def size(self) -> int:
        return 0

    def print(self, offset: int):
        raise NotImplementedError()


class TTF_UInt16(TTFType):
    def to_rust(self) -> str:
        return 'u16'

    def size(self) -> int:
        return 2

    def print(self, offset: int):
        print(f'u16::from_be_bytes([self.data[{offset}], self.data[{offset + 1}]])')


class TableRow:
    enable: bool
    ttf_type: TTFType
    name: str

    def __init__(self, enable, ttf_type, name):
        self.enable = enable
        self.ttf_type = ttf_type
        self.name = name


NAME_RECORD_TABLE = [
    TableRow(True,  TTF_UInt16(),   'platformID'),
    TableRow(True,  TTF_UInt16(),   'encodingID'),
    TableRow(True,  TTF_UInt16(),   'languageID'),
    TableRow(True,  TTF_UInt16(),   'nameID'),
    TableRow(True,  TTF_UInt16(),   'length'),
    TableRow(True,  TTF_UInt16(),   'offset'),
]


def print_struct(struct_name: str):
    print('#[derive(Clone, Copy)]')
    print(f'pub struct {struct_name} {{ data: [u8; Self::SIZE] }}')


def print_struct_size(size: int):
    print(f'pub const SIZE: usize = {size};')


def print_constructor(struct_name):
    print('#[inline(always)]')
    print('pub fn new(input: &[u8]) -> Self {')
    print('    let mut data = [0u8; Self::SIZE];')
    # Do not use `copy_from_slice`, because it's slower.
    print('    data.clone_from_slice(input);')
    print(f'    {struct_name} {{ data }}')
    print('}')


def print_method(spec_name: str, ttf_type, offset: int):
    fn_name = to_snake_case(spec_name)
    rust_type = ttf_type.to_rust()

    print('    #[inline(always)]')
    print(f'    pub fn {fn_name}(&self) -> {rust_type} {{')
    ttf_type.print(offset)
    print('    }')


def generate_table(table, struct_name: str):
    struct_size = 0
    for row in table:
        struct_size += row.ttf_type.size()

    print_struct(struct_name)
    print()
    print(f'impl {struct_name} {{')
    print_struct_size(struct_size)
    print()
    print_constructor(struct_name)
    print()

    offset = 0
    for row in table:
        if not row.enable:
            offset += row.ttf_type.size()
            continue

        print_method(row.name, row.ttf_type, offset)
        print()

        offset += row.ttf_type.size()

    print('}')


print('// This file is autogenerated by scripts/get-tables.py')
print('// Do not edit it!')
print()
print('// By using static arrays we can have compile-time guaranties that')
print('// we are not reading out-ouf-bounds.')
print('// Also, it removes bounds-checking overhead.')
print()
print('#![allow(dead_code)]')
print()

print('pub mod name {')
generate_table(NAME_RECORD_TABLE, 'NameRecord')
print('}')
